# Copyright 2011,2012,2016,2018,2019 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of gr-correctiq
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

########################################################################
# FMA Detection
########################################################################
# Reference for detection
# https://gist.github.com/hideo55/5642892

IF(UNIX)
	IF(NOT APPLE)
    	MESSAGE(STATUS "Detected Linux OS")
		EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)
	ELSE(NOT APPLE)
    	MESSAGE(STATUS "Detected Apple OS")
		EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE CPUINFO)
	ENDIF(NOT APPLE)
	
	STRING(REGEX REPLACE "^.*(fma).*$" "fma" FMA_THERE ${CPUINFO})
   STRING(COMPARE EQUAL "fma" "${FMA_THERE}" FMA_TRUE)
   IF (FMA_TRUE)
		MESSAGE(STATUS "Found FMA.  Setting fma compile flag.")
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfma")
   ELSE (FMA_TRUE)
		MESSAGE(STATUS "Not using FMA")
	ENDIF (FMA_TRUE)
ELSE()
    MESSAGE(STATUS "OS is not linux.  Not setting FMA flags.")
ENDIF()

########################################################################
# Setup library
########################################################################
include(GrPlatform) #define LIB_SUFFIX

list(APPEND correctiq_sources
    correctiq_impl.cc
    SwapIQ_impl.cc
    correctiq_man_impl.cc
    correctiq_auto_impl.cc
)

set(correctiq_sources "${correctiq_sources}" PARENT_SCOPE)
if(NOT correctiq_sources)
    MESSAGE(STATUS "No C++ sources... skipping lib/")
    return()
endif(NOT correctiq_sources)

add_library(gnuradio-correctiq SHARED ${correctiq_sources})
target_link_libraries(gnuradio-correctiq gnuradio::gnuradio-runtime)
target_include_directories(gnuradio-correctiq
    PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../include>
    PUBLIC $<INSTALL_INTERFACE:include>
  )
set_target_properties(gnuradio-correctiq PROPERTIES DEFINE_SYMBOL "gnuradio_correctiq_EXPORTS")

if(APPLE)
    set_target_properties(gnuradio-correctiq PROPERTIES
        INSTALL_NAME_DIR "${CMAKE_INSTALL_PREFIX}/lib"
    )
endif(APPLE)

########################################################################
# Install built library files
########################################################################
include(GrMiscUtils)
GR_LIBRARY_FOO(gnuradio-correctiq)

########################################################################
# Print summary
########################################################################
message(STATUS "Using install prefix: ${CMAKE_INSTALL_PREFIX}")
message(STATUS "Building for version: ${VERSION} / ${LIBVER}")

########################################################################
# Build and register unit test
########################################################################
include(GrTest)

# If your unit tests require special include paths, add them here
#include_directories()
# List all files that contain Boost.UTF unit tests here
list(APPEND test_correctiq_sources
)
# Anything we need to link to for the unit tests go here
list(APPEND GR_TEST_TARGET_DEPS gnuradio-correctiq)

if(NOT test_correctiq_sources)
    MESSAGE(STATUS "No C++ unit tests... skipping")
    return()
endif(NOT test_correctiq_sources)

foreach(qa_file ${test_correctiq_sources})
    GR_ADD_CPP_TEST("correctiq_${qa_file}"
        ${CMAKE_CURRENT_SOURCE_DIR}/${qa_file}
    )
endforeach(qa_file)
